namespace Miruken.Mvc.Console.Test
{
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    [TestClass]
    public class DockPanelTopTests: TestBase
    {
        [TestMethod]
        public void DockTopStretch()
        {
            Assert(HorizontalAlignment.Stretch, new []
            {
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
            });
        }

        [TestMethod]
        public void DockTopUnknown()
        {
            Assert(HorizontalAlignment.Unknown, new []
            {
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
            });
        }

        [TestMethod]
        public void DockTopLeft()
        {
            Assert(HorizontalAlignment.Left, new []
            {
                new [] {'-', '-', '-', '-', '-', ' ', ' ', ' ', ' ', ' '},
                new [] {'|', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' '},
                new [] {'-', '-', '-', '-', '-', ' ', ' ', ' ', ' ', ' '},
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
            });
        }

        [TestMethod]
        public void DockTopCenter()
        {
            Assert(HorizontalAlignment.Center, new []
            {
                new [] {' ', ' ', '-', '-', '-', '-', '-', '-', ' ', ' '},
                new [] {' ', ' ', '|', ' ', ' ', ' ', ' ', '|', ' ', ' '},
                new [] {' ', ' ', '-', '-', '-', '-', '-', '-', ' ', ' '},
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
            });
        }

        [TestMethod]
        public void DockTopRight()
        {
            Assert(HorizontalAlignment.Right, new []
            {
                new [] {' ', ' ', ' ', ' ', ' ', '-', '-', '-', '-', '-'},
                new [] {' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', '|'},
                new [] {' ', ' ', ' ', ' ', ' ', '-', '-', '-', '-', '-'},
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
            });
        }

        public void Assert(HorizontalAlignment horizontalAlignment, char[][] expected)
        {
            var main = new DockPanel()
            {
                Size = new Size(10, 10)
            };

            main.Add(
                new DockPanel {
                    Border              = new Thickness(1),
                    HorizontalAlignment = horizontalAlignment,
                    Size                = new Size(5, 5)
                },
                new DockChildSettings(Dock.Top, 30));

            main.Add(
                new DockPanel
                {
                    Border = new Thickness(1)
                },
                new DockChildSettings(Dock.Fill));

            var cells = Render(main.Size, main);

            AssertCellsAreEquivelant(expected, cells);
        }

        [TestMethod]
        public void Centering()
        {
            var main = new DockPanel()
            {
                Size = new Size(5, 5)
            };
            main.Add(
                new DockPanel
                {
                    Border              = new Thickness(1),
                    HorizontalAlignment = HorizontalAlignment.Center,
                    Size                = new Size(3, 3)
                },
                new DockChildSettings(Dock.Top, 60));

            AssertCellsAreEquivelant(new []
            {
                new[] {' ','-','-','-',' '},
                new[] {' ','|',' ','|',' '},
                new[] {' ','-','-','-',' '},
                new[] {' ',' ',' ',' ',' '},
                new[] {' ',' ',' ',' ',' '}
            }, Render(main.Size, main));
        }

    }

    [TestClass]
    public class DockPanelBottomTests: TestBase
    {
        [TestMethod]
        public void DockBottomStretch()
        {
            Assert(HorizontalAlignment.Stretch, new []
            {
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'}
            });
        }

        [TestMethod]
        public void DockBottomUnknown()
        {
            Assert(HorizontalAlignment.Unknown, new []
            {
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'}
            });
        }

        [TestMethod]
        public void DockBottomLeft()
        {
            Assert(HorizontalAlignment.Left, new []
            {
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                new [] {'-', '-', '-', '-', '-', ' ', ' ', ' ', ' ', ' '},
                new [] {'|', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' '},
                new [] {'-', '-', '-', '-', '-', ' ', ' ', ' ', ' ', ' '}
            });
        }

        [TestMethod]
        public void DockBottomCenter()
        {
            Assert(HorizontalAlignment.Center, new []
            {
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                new [] {' ', ' ', '-', '-', '-', '-', '-', '-', ' ', ' '},
                new [] {' ', ' ', '|', ' ', ' ', ' ', ' ', '|', ' ', ' '},
                new [] {' ', ' ', '-', '-', '-', '-', '-', '-', ' ', ' '}
            });
        }

        [TestMethod]
        public void DockBottomRight()
        {
            Assert(HorizontalAlignment.Right, new []
            {
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                new [] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                new [] {' ', ' ', ' ', ' ', ' ', '-', '-', '-', '-', '-'},
                new [] {' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', '|'},
                new [] {' ', ' ', ' ', ' ', ' ', '-', '-', '-', '-', '-'}
            });
        }

        public void Assert(HorizontalAlignment horizontalAlignment, char[][] expected)
        {
            var main = new DockPanel()
            {
                Size = new Size(10, 10)
            };

            main.Add(
                new DockPanel {
                    Border              = new Thickness(1),
                    HorizontalAlignment = horizontalAlignment,
                    Size                = new Size(5, 5)
                },
                new DockChildSettings(Dock.Bottom, 30));

            main.Add(
                new DockPanel {
                    Border = new Thickness(1)
                },
                new DockChildSettings(Dock.Fill));

            var cells = Render(main.Size, main);

            AssertCellsAreEquivelant(expected, cells);
        }

    }

    [TestClass]
    public class DockPanelRightTests : TestBase
    {
        [TestMethod]
        public void DockRightStretch()
        {
            Assert(VerticalAlignment.Stretch, new[]
                   {
                       new[] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '|', ' ', '|'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '|', ' ', '|'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '|', ' ', '|'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '|', ' ', '|'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '|', ' ', '|'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '|', ' ', '|'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '|', ' ', '|'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '|', ' ', '|'},
                       new[] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                   });
        }

        [TestMethod]
        public void DockRightUnknown()
        {
            Assert(VerticalAlignment.Unknown, new[]
                   {
                       new[] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '|', ' ', '|'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '|', ' ', '|'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '|', ' ', '|'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '|', ' ', '|'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '|', ' ', '|'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '|', ' ', '|'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '|', ' ', '|'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '|', ' ', '|'},
                       new[] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                   });
        }

        [TestMethod]
        public void DockRightTop()
        {
            Assert(VerticalAlignment.Top, new[]
                   {
                       new[] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '|', ' ', '|'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '|', ' ', '|'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '|', ' ', '|'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '-', '-', '-'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' '},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' '},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' '},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' '},
                       new[] {'-', '-', '-', '-', '-', '-', '-', ' ', ' ', ' '},
                   });
        }

        [TestMethod]
        public void DockRightCenter()
        {
            Assert(VerticalAlignment.Center, new[]
                   {
                       new[] {'-', '-', '-', '-', '-', '-', '-', ' ', ' ', ' '},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' '},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '-', '-', '-'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '|', ' ', '|'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '|', ' ', '|'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '|', ' ', '|'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '|', ' ', '|'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '-', '-', '-'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' '},
                       new[] {'-', '-', '-', '-', '-', '-', '-', ' ', ' ', ' '},
                   });
        }

        [TestMethod]
        public void DockRightBottom()
        {
            Assert(VerticalAlignment.Bottom, new[]
                   {
                       new[] {'-', '-', '-', '-', '-', '-', '-', ' ', ' ', ' '},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' '},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' '},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' '},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' '},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '-', '-', '-'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '|', ' ', '|'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '|', ' ', '|'},
                       new[] {'|', ' ', ' ', ' ', ' ', ' ', '|', '|', ' ', '|'},
                       new[] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                   });
        }

        public void Assert(VerticalAlignment verticalAlignment, char[][] expected)
        {
            var main = new DockPanel()
            {
                Size = new Size(10, 10)
            };

            main.Add(
                new DockPanel
                {
                    Border = new Thickness(1),
                    VerticalAlignment = verticalAlignment,
                    Size = new Size(5, 5)
                },
                new DockChildSettings(Dock.Right, 30));
            main.Add(
                new DockPanel
                {
                    Border =  new Thickness(1)
                },
                new DockChildSettings(Dock.Fill));

            var cells = Render(main.Size, main);

            AssertCellsAreEquivelant(expected, cells);
        }
    }

    [TestClass]
    public class DockPanelLeftTests : TestBase
    {
        [TestMethod]
        public void DockLeftStretch()
        {
            Assert(VerticalAlignment.Stretch, new[]
                   {
                       new[] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                       new[] {'|', ' ', '|', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'|', ' ', '|', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'|', ' ', '|', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'|', ' ', '|', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'|', ' ', '|', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'|', ' ', '|', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'|', ' ', '|', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'|', ' ', '|', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                   });
        }

        [TestMethod]
        public void DockLeftUnknown()
        {
            Assert(VerticalAlignment.Unknown, new[]
                   {
                       new[] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                       new[] {'|', ' ', '|', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'|', ' ', '|', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'|', ' ', '|', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'|', ' ', '|', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'|', ' ', '|', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'|', ' ', '|', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'|', ' ', '|', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'|', ' ', '|', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                   });
        }

        [TestMethod]
        public void DockLeftTop()
        {
            Assert(VerticalAlignment.Top, new[]
                   {
                       new[] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                       new[] {'|', ' ', '|', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'|', ' ', '|', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'|', ' ', '|', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'-', '-', '-', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {' ', ' ', ' ', '-', '-', '-', '-', '-', '-', '-'},
                   });
        }

        [TestMethod]
        public void DockTopCenter()
        {
            Assert(VerticalAlignment.Center, new[]
                   {
                       new[] {' ', ' ', ' ', '-', '-', '-', '-', '-', '-', '-'},
                       new[] {' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'-', '-', '-', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'|', ' ', '|', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'|', ' ', '|', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'|', ' ', '|', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'|', ' ', '|', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'-', '-', '-', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {' ', ' ', ' ', '-', '-', '-', '-', '-', '-', '-'},
                   });
        }

        [TestMethod]
        public void DockLeftBottom()
        {
            Assert(VerticalAlignment.Bottom, new[]
                   {
                       new[] {' ', ' ', ' ', '-', '-', '-', '-', '-', '-', '-'},
                       new[] {' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'-', '-', '-', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'|', ' ', '|', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'|', ' ', '|', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'|', ' ', '|', '|', ' ', ' ', ' ', ' ', ' ', '|'},
                       new[] {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                   });
        }

        public void Assert(VerticalAlignment verticalAlignment, char[][] expected)
        {
            var main = new DockPanel()
            {
                Size = new Size(10, 10)
            };

            main.Add(
                new DockPanel
                {
                    Border = new Thickness(1),
                    VerticalAlignment = verticalAlignment,
                    Size = new Size(5, 5)
                },
                new DockChildSettings(Dock.Left, 30));

            main.Add(
                new DockPanel
                {
                    Border = new Thickness(1)
                },
                new DockChildSettings(Dock.Fill));

            var cells = Render(main.Size, main);

            AssertCellsAreEquivelant(expected, cells);
        }
    }

    [TestClass]
    public class DockPanelMultipleDockingsTests: TestBase
    {
        [TestMethod]
        public void SupportsMultipleChildren()
        {
            Assert(new []
            {
                new [] {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
                new [] {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                new [] {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                new [] {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                new [] {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                new [] {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
                new [] {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
                new [] {'|',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ','|'},
                new [] {'|',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ','|'},
                new [] {'|',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ','|'},
                new [] {'|',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ','|'},
                new [] {'|',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ','|'},
                new [] {'|',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ','|'},
                new [] {'|',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ','|'},
                new [] {'|',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ','|'},
                new [] {'|',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ','|'},
                new [] {'|',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ','|'},
                new [] {'|',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ','|'},
                new [] {'|',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ','|'},
                new [] {'|',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ','|'},
                new [] {'|',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ','|'},
                new [] {'|',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ','|'},
                new [] {'|',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ','|'},
                new [] {'|',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ','|'},
                new [] {'|',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ','|'},
                new [] {'|',' ',' ',' ',' ','|','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
                new [] {'|',' ',' ',' ',' ','|','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
                new [] {'|',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                new [] {'|',' ',' ',' ',' ','|','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                new [] {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'}
            });
        }

        public void Assert(char[][] expected)
        {
            var main = new DockPanel()
            {
                Size = new Size(30, 30)
            };

            var header = new DockPanel {
                Border = new Thickness(1)
            };

            var leftPanel = new DockPanel {
                Border = new Thickness(1)
            };

            var footer = new DockPanel {
                Border = new Thickness(1)
            };

            var rightPanel = new DockPanel {
                Border = new Thickness(1)
            };

            var middleLeft = new DockPanel {
                Border = new Thickness(1),
            };

            var middleRight = new DockPanel
            {
                Border = new Thickness(1)
            };

            main.Add(header,      new DockChildSettings(Dock.Top,    20));
            main.Add(leftPanel,   new DockChildSettings(Dock.Left,   20));
            main.Add(footer,      new DockChildSettings(Dock.Bottom, 20));
            main.Add(rightPanel,  new DockChildSettings(Dock.Right,  30));
            main.Add(middleLeft,  new DockChildSettings(Dock.Left,   50));
            main.Add(middleRight, new DockChildSettings(Dock.Fill));

            var cells = Render(main.Size, main);

            AssertCellsAreEquivelant(expected, cells);
        }

    }

    [TestClass]
    public class DockPanelWithContent : TestBase
    {
        [TestMethod]
        public void RendersAllContent()
        {
            Assert(new []
            {
                new [] {'-','-','-','-','-','-','-','-','-','-'},
                new [] {'-','-','-','-','-','-','-','-','-','-'},
                new [] {'|','|','a','a','a','a','a','a','|','|'},
                new [] {'|','|','a','a','a','a','a','a','|','|'},
                new [] {'-','-','-','-','-','-','-','-','-','-'},
                new [] {'-','-','-','-','-','-','-','-','-','-'},
                new [] {'-','-','-','-','-','-','-','-','-','-'},
                new [] {'-','-','-','-','-','-','-','-','-','-'},
                new [] {'-','-','-','-','-','-','-','-','-','-'},
                new [] {'|','|','|','b','b','b','b','|','|','|'},
                new [] {'|','|','|','b','b','b','b','|','|','|'},
                new [] {'|','|','|','b','b','b','b','|','|','|'},
                new [] {'|','|','|','b','b','b','b','|','|','|'},
                new [] {'|','|','|','b','b','b','b','|','|','|'},
                new [] {'|','|','|','b','b','b','b','|','|','|'},
                new [] {'|','|','|','b','b','b','b','|','|','|'},
                new [] {'|','|','|','b','b','b','b','|','|','|'},
                new [] {'-','-','-','-','-','-','-','-','-','-'},
                new [] {'-','-','-','-','-','-','-','-','-','-'},
                new [] {'-','-','-','-','-','-','-','-','-','-'}
            });
        }

        public void Assert(char[][] expected)
        {
            var _view = new TestViewRegionsWithContent();
            var cells = Render(new Size(10, 20), _view);
            AssertCellsAreEquivelant(expected, cells);
        }
    }

    public class TestViewRegionsWithContent : View
    {
        public TestViewRegionsWithContent()
        {
            var dock = new DockPanel();
            Content = dock;

            var headerContent = new Buffer
            {
                Border = new Thickness(2)
            }
                .WriteLine("aaaaaa")
                .WriteLine("aaaaaa");

            var bodyContent = new Buffer
            {
                Border = new Thickness(3)
            }
                .WriteLine("bbbb")
                .WriteLine("bbbb")
                .WriteLine("bbbb")
                .WriteLine("bbbb")
                .WriteLine("bbbb")
                .WriteLine("bbbb")
                .WriteLine("bbbb")
                .WriteLine("bbbb");

            var header = new ViewRegion();
            header.Add(headerContent);

            var body = new ViewRegion();
            body.Add(bodyContent);

            dock.Add(header, Dock.Top, 30);
            dock.Add(body, Dock.Fill);
        }
    }
}
